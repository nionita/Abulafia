module Eval.PST (
    pst, trip2idx
  ) where

import Data.Array.Unboxed
import Struct.Struct

pawn = listArray (0, 63) [
        0,  0,   0,   0,   0,   0,  0,  0,
        5, 10,  10, -20, -20,  10, 10,  5,
        5, -5, -10,   0,   0, -10, -5,  5,
        0,  0,   0,  20,  20,   0,  0,  0,
        5,  5,  10,  25,  25,  10,  5,  5,
       10, 10,  20,  30,  30,  20, 10, 10,
       50, 50,  50,  50,  50,  50, 50, 50,
        0,  0,   0,   0,   0,   0,  0,  0
     ]

knight = listArray (0, 63) [
     -50, -40, -30, -30, -30, -30, -40, -50,
     -40, -20,   0,   5,   5,   0, -20, -40,
     -30,   5,  10,  15,  15,  10,   5, -30,
     -30,   0,  15,  20,  20,  15,   0, -30,
     -30,   5,  15,  20,  20,  15,   5, -30,
     -30,   0,  10,  15,  15,  10,   0, -30,
     -40, -20,   0,   0,   0,   0, -20, -40,
     -50, -40, -30, -30, -30, -30, -40, -50
     ]

bishop = listArray (0, 63) [
     -20, -10, -10, -10, -10, -10, -10, -20,
     -10,   5,   0,   0,   0,   0,   5, -10,
     -10,  10,  10,  10,  10,  10,  10, -10,
     -10,   0,  10,  10,  10,  10,   0, -10,
     -10,   5,   5,  10,  10,   5,   5, -10,
     -10,   0,   5,  10,  10,   5,   0, -10,
     -10,   0,   0,   0,   0,   0,   0, -10,
     -20, -10, -10, -10, -10, -10, -10, -20
     ]

rook = listArray (0, 63) [
      0,  0,  0,  5,  5,  0,  0,  0,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
      5, 10, 10, 10, 10, 10, 10,  5,
      0,  0,  0,  0,  0,  0,  0,  0
     ]

queen = listArray (0, 63) [
     -20, -10, -10, -5, -5, -10, -10, -20,
     -10,   0,   5,  0,  0,   0,   0, -10,
     -10,   5,   5,  5,  5,   5,   0, -10,
      -5,   0,   5,  5,  5,   5,   0,  -5,
       0,   0,   5,  5,  5,   5,   0,  -5,
     -10,   0,   5,  5,  5,   5,   0, -10,
     -10,   0,   0,  0,  0,   0,   0, -10,
     -20, -10, -10, -5, -5, -10, -10, -20
     ]

king :: UArray Int Int
king = listArray (0, 63) [
      20,  30,  10,   0,   0,  10,  30,  20,
      20,  20,   0,   0,   0,   0,  20,  20,
     -10, -20, -20, -20, -20, -20, -20, -10,
     -20, -30, -30, -40, -40, -30, -30, -20,
     -30, -40, -40, -50, -50, -40, -40, -30,
     -30, -40, -40, -50, -50, -40, -40, -30,
     -30, -40, -40, -50, -50, -40, -40, -30,
     -30, -40, -40, -50, -50, -40, -40, -30
     ]

pst :: UArray Int Int
pst = listArray (0, 2 * 6 * 64 - 1)
          [ pval c pa f | c <- [White, Black],
                pa <- [pawn, knight, bishop, rook, queen, king], f <- [0 .. 63]]
    where pval White pf f = pf!f
          pval Black pf f = pf!mirror f
          mirror f = let (r, c) = f `divMod` 8 in (7 - r) * 8 + c

trip2idx :: Color -> Piece -> Square -> Int
trip2idx White Pawn   s =  t0 + s
trip2idx White Knight s =  t1 + s
trip2idx White Bishop s =  t2 + s
trip2idx White Rook   s =  t3 + s
trip2idx White Queen  s =  t4 + s
trip2idx White King   s =  t5 + s
trip2idx Black Pawn   s =  t6 + s
trip2idx Black Knight s =  t7 + s
trip2idx Black Bishop s =  t8 + s
trip2idx Black Rook   s =  t9 + s
trip2idx Black Queen  s = t10 + s
trip2idx Black King   s = t11 + s

t0  =  0*64
t1  =  1*64
t2  =  2*64
t3  =  3*64
t4  =  4*64
t5  =  5*64
t6  =  6*64
t7  =  7*64
t8  =  8*64
t9  =  9*64
t10 = 10*64
t11 = 11*64
